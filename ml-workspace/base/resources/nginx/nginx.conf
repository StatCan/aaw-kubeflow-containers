
# Log errors to stdout - Tested?
error_log /dev/stdout warn;

events {}

http {
    
    # TODO change log format: https://github.wdf.sap.corp/ml-foundation/ml-studio/blob/develop/backend/studio-service/docker-res/nginx.conf
    log_format my_upstream '$remote_addr [$time_local] "$request" $status'
    ' "$upstream_addr" $upstream_response_time $upstream_http_etag $remaining_part';

    # if SERVICE_SSL_ENABLED flag is set, following lines are commented in and the path to the certs is set
    #ssl_certificate
    #ssl_certificate_key

    # TODO access_log /var/log/nginx/access.log nginx;

    lua_package_path "/etc/nginx/nginx_plugins/lua-resty-string/?.lua;/etc/nginx/nginx_plugins/lua-resty-http/?.lua;;";
    
    client_max_body_size 10G;
    client_body_timeout 300s;
    client_header_timeout 120s;

    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;
    
    map $http_referer $served_referer {
       default $http_referer;
       # TODO change to http_host? host does not include the port
       "~.*hub.*" $host/hub/;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

     map $upstream_http_location $new_location {
        default .$upstream_http_location;
    }

    upstream jupyter {
        server 127.0.0.1:8090 fail_timeout=0;
    }
    
    server {
        listen 8092;

        #auth_basic "Restricted Access";
        #auth_basic_user_file /etc/nginx/.htpasswd;

        # only do relative redirects
        absolute_redirect off;

        error_page 502 504 /5xx.html;
        error_page 497 https://$http_host$request_uri;

        location = /5xx.html {
            auth_basic off;
            root /resources/;
            internal;
        }

        location / {
            proxy_pass http://jupyter;
            
            proxy_set_header X-Real-IP $remote_addr;
            # Todo: change to http_host? host does not include the port (= higher security?)
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Origin ""; # set origin to empty, otherwise Jupyter returns a bad origin request
        
            # websocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location = "{WORKSPACE_BASE_URL_DECODED}/favicon.ico" {
            # use favicon in resources folder
            auth_basic off;
            alias /resources/branding/favicon.ico;
        }

        location = /healthy {
            auth_basic off;
            return 200;
        }

        location = /ping {
            auth_basic off;
            return 200;
        }

        location = /publickey {
            auth_basic off;
            alias /resources/public-key.pub;
            add_header Content-Type text/plain;
        }

        # enable http over websocket -> colab support - currently not working with base path
        location ~* /http_over_websocket(?<remaining_part>.*) {
            # Needs to be set explicitly, otherwise websocket cannot assign address
            proxy_set_header Host localhost:8092;
            proxy_set_header Origin ""; # set origin to empty, otherwise Jupyter returns a bad origin request
        
            # websocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_pass http://jupyter{WORKSPACE_BASE_URL_ENCODED}/http_over_websocket$remaining_part$is_args$args;
        }

        # if base path is not in request url -> alway redirect to base path
        location ~* "^(?!{WORKSPACE_BASE_URL_DECODED}).*$" {
            auth_basic off;
            return 302 {WORKSPACE_BASE_URL_ENCODED}$request_uri;
        }

        # needed for the kernel to connect
        location ~* "^{WORKSPACE_BASE_URL_DECODED}/(api/kernels/[^/]+/(channels|iopub|shell|stdin)|terminals/websocket)/?" {
            proxy_pass http://jupyter;
            
            proxy_set_header Referer $served_referer;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_hide_header content-security-policy;
            proxy_set_header Origin "";

            # websocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # if url is called without trailing slash, add a trailing slash, otherwise it cannot be routed correctly.
        # example: /tools/netdata -> /tools/netdata/ ; /tools/vnc -> /tools/vnc/ ; /tools/netdata/foo -(unchanged)> /tools/netdata/foo
        location ~* "^{WORKSPACE_BASE_URL_DECODED}/tools/[^/]+$" {
            # uri is only the path whereas request_uri also contains args
            return 302 $uri/$is_args$args;
        }

        location ~* "^{WORKSPACE_BASE_URL_DECODED}/tools/(?<tool>[a-zA-Z]+)/(?<remaining_part>.*)" {
            access_log /var/log/nginx/upstream.log my_upstream;

            # Allow CORS requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Methods "GET, OPTIONS, DELETE, POST, PUT";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }

           # Check jupyter ping method if authenticated based on cookies
            access_by_lua_block {
                local http = require "resty.http"
                local http_connection = http.new()
                
                -- only authenticate via jupyter ping method if it is activated (not false)
                if "{AUTHENTICATE_VIA_JUPYTER}" ~= "false" then
                    local res, error = http_connection:request_uri(
                        "http://127.0.0.1:8090{WORKSPACE_BASE_URL_ENCODED}/tooling/ping", 
                        {
                            method = "GET", 
                            headers = {
                                ['Cookie'] = ngx.var.http_cookie,
                                ["Authorization"] = ngx.var.http_authorization,
                                ["Host"] = ngx.var.host
                            },
                        
                        }
                    )

                    if error ~= nil or res == nil or res.status ~= 200 then
                        -- TODO add next flag -> to redirect back?
                        return ngx.redirect("{WORKSPACE_BASE_URL_ENCODED}/")
                    end
                end
            }

            if ($tool = vnc) {
                set $tool_port 6901;
            }
            if ($tool = netdata) {
                set $tool_port 8050;
            }
            if ($tool = ungit) {
                set $tool_port 8051;
                set $remaining_part {WORKSPACE_BASE_URL_ENCODED}/tools/ungit/$remaining_part; # since ungit is listening on the specific base_url, it has to be prepended here
            }
            if ($tool = glances) {
                set $tool_port 8053;
            }
            if ($tool = vscode) {
                set $tool_port 8054;
            }
           
            if ($remaining_part !~ ^/(.*)$) {
                # add slash to remaining part if it wasn't already added
                # required since base path always starts with slash
                set $remaining_part /$remaining_part;
            }

            proxy_redirect off;
            proxy_set_header Host $host;

            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_request_headers on;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_store off;

            proxy_pass http://127.0.0.1:$tool_port$remaining_part$is_args$args;

            gzip on;
            gzip_proxied any;
            gzip_types *;
        }
        
        # Access all-ports via /tools/PORT
        location ~* "^{WORKSPACE_BASE_URL_DECODED}/tools/(?<access_port>[0-9]+)/(?<remaining_part>.*)" {
            access_log /var/log/nginx/upstream.log my_upstream;
            
            # Allow CORS requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Methods "GET, OPTIONS, DELETE, POST, PUT";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }

            # Check jupyter ping method if authenticated based on cookies
            access_by_lua_block {
                local http = require "resty.http"
                local http_connection = http.new()
                
                -- only authenticate via jupyter ping method if it is activated (not false)
                if "{AUTHENTICATE_VIA_JUPYTER}" ~= "false" then
                    local res, error = http_connection:request_uri(
                        "http://127.0.0.1:8090{WORKSPACE_BASE_URL_ENCODED}/tooling/ping", 
                        {
                            method = "GET", 
                            headers = {
                                ['Cookie'] = ngx.var.http_cookie,
                                ["Authorization"] = ngx.var.http_authorization,
                                ["Host"] = ngx.var.host
                            },
                        
                        }
                    )

                    if error ~= nil or res == nil or res.status ~= 200 then
                        -- TODO add next flag -> to redirect back?
                        return ngx.redirect("{WORKSPACE_BASE_URL_ENCODED}/")
                    end
                end
            }
            
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Credentials "true";

            # Disable proxy buffering - applications like guacamole have problems with this setting
            proxy_buffering off;

            proxy_redirect off;
            proxy_set_header Host $host;

            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
            proxy_pass_request_headers on;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_store off;
            
            proxy_pass http://127.0.0.1:$access_port/$remaining_part$is_args$args;

            gzip on;
            gzip_proxied any;
            gzip_types *;
        }

        # Shared Tooling and SSH setup
        location = "{WORKSPACE_BASE_URL_DECODED}/shared/ssh/setup" {
            auth_basic off;
	        
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Origin ""; # set origin to empty, otherwise Jupyter returns a bad origin request

            proxy_pass http://jupyter{WORKSPACE_BASE_URL_ENCODED}/shared/ssh/setup$is_args$args;
        }

        # if url is called without trailing slash, add a trailing slash, otherwise it cannot be routed correctly.
        location ~* "^{WORKSPACE_BASE_URL_DECODED}/shared/tools/[^/]+$" {
            auth_basic off;
            return 302 $uri/$is_args$args;
        }

        # File sharing support
        location ~* "^{WORKSPACE_BASE_URL_DECODED}/shared/filebrowser/(?<remaining_part>.*)" {
            access_log /var/log/nginx/upstream.log my_upstream;
            set $token '';

            # Check if basic auth should be activated 
            # needs to be in set_by_lua clause, otherwise it is not executed before auth_basic
            set_by_lua $auth_basic '
                local token = ngx.var.arg_token
                local cookie_name = "workspace-token-shared-filebrowser"
                if token == nil or token == "" then
                    token = ngx.var["cookie_" .. cookie_name]
                end

                if token == nil or token == "" or string.len(token) ~= 40 then
                    return "Restricted Access"
                end
                return "off"
            ';

            # Check if valid token (40 chars)
            access_by_lua_block {
                local token = ngx.var.arg_token
                local cookie_name = "workspace-token-shared-filebrowser"

                local tool_path = "{WORKSPACE_BASE_URL_ENCODED}/shared/filebrowser/"

                if token == nil or token == '' then
                    token = ngx.var["cookie_" .. cookie_name]
                else
                    -- if token is provided as get parameter, set as cookie
                    ngx.header["Set-Cookie"] = cookie_name .. "=" .. token .. "; path=" .. tool_path
                    -- remove token from args
                    local args = ngx.req.get_uri_args()
                    args.token = nil
                    ngx.req.set_uri_args(args)
                end

                
                if token == nil or token == '' then
                    ngx.status = 401
                    ngx.say("Please provide a valid API token via token get parameter.")
                    ngx.exit(401)
                elseif string.len(token) ~= 40 then
                    -- token is not a valid sha1 token, check for admin access
                    -- only authenticate via jupyter ping method if it is activated (not false)
                    if "{AUTHENTICATE_VIA_JUPYTER}" ~= "false" then
                        local http = require "resty.http"
                        local http_connection = http.new()
                        local res, error = http_connection:request_uri(
                            "http://127.0.0.1:8090{WORKSPACE_BASE_URL_ENCODED}/tooling/ping", 
                            {
                                method = "GET", 
                                headers = {
                                    ['Cookie'] = ngx.var.http_cookie,
                                    ["Authorization"] = ngx.var.http_authorization,
                                    ["Host"] = ngx.var.host
                                },
                            }
                        )

                        if error ~= nil or res == nil or res.status ~= 200 then
                            ngx.status = 401
                            ngx.say("You are not allowed to access the filebrowser via the provided token.")
                            ngx.exit(401)
                        end
                    end
                elseif "{SHARED_LINKS_ENABLED}" ~= "true" then
                    ngx.status = 401
                    ngx.say("Shared links are disabled. Files cannot be shared and accessed externally.")
                    ngx.exit(401)
                end

                ngx.var.token = token

                -- the remaining part needs to be url escaped
                ngx.var.remaining_part = ngx.re.gsub(ngx.var.remaining_part, " ", "%20")
                -- this also escapes / ngx.var.remaining_part = ngx.escape_uri(ngx.var.remaining_part)
            }

            #auth_basic $auth_basic;

            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Credentials "true";

            proxy_redirect off;
            proxy_set_header Host $host;

            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Token-Header $token;
            proxy_http_version 1.1;
            proxy_pass_request_headers on;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_store off;
            proxy_pass http://127.0.0.1:8055{WORKSPACE_BASE_URL_ENCODED}/shared/filebrowser/$remaining_part$is_args$args;

            gzip on;
            gzip_proxied any;
            gzip_types *;
        }

         # Access all-ports via /tools/PORT - shared modus via access token
        location ~* "^{WORKSPACE_BASE_URL_DECODED}/shared/tools/(?<access_port>[0-9]+)/(?<remaining_part>.*)" {
            access_log /var/log/nginx/upstream.log my_upstream;
            
            auth_basic off;

            # Allow CORS requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Methods "GET, OPTIONS, DELETE, POST, PUT";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }
            
            # Check if request was made with a valid token either as get parameter or in workspace-token-tool-PORT cookie
            access_by_lua_block {
                if "{SHARED_LINKS_ENABLED}" ~= "true" then
                    ngx.status = 401
                    ngx.say("Shared links are disabled. Tools cannot be shared and accessed externally.")
                    ngx.exit(401)
                end

                local resty_sha1 = require "resty.sha1"
                local resty_str = require "resty.string"

                local sha1 = resty_sha1:new()
                if not sha1 then
                    ngx.say("failed to create the sha1 object")
                    ngx.status = 500
                    ngx.exit(500)
                end
                local tool_path = "{WORKSPACE_BASE_URL_ENCODED}/shared/tools/" ..  ngx.var.access_port .. "/"
                local token_str = "{KEY_HASH}" .. tool_path

                local ok = sha1:update(token_str)
                if not ok then
                    ngx.status = 500
                    ngx.say("Failed to create hashed token.")
                    ngx.exit(500)
                end
                local token = ngx.var.arg_token
                local cookie_name = "workspace-token-tool-" .. ngx.var.access_port

                if token == nil or token == '' then
                    token = ngx.var["cookie_" .. cookie_name]
                else
                    -- if token is provided as get parameter, set as cookie
                    ngx.header["Set-Cookie"] = cookie_name .. "=" .. token .. "; path=" .. tool_path
                    -- remove token from args
                    local args = ngx.req.get_uri_args()
                    args.token = nil
                    ngx.req.set_uri_args(args)
                end

                if token == nil or token == '' then
                    ngx.status = 401
                    ngx.say("Please provide a valid API token via token get parameter.")
                    ngx.exit(401)
                end

                local generated_token = resty_str.to_hex(sha1:final())
                ngx.log(ngx.DEBUG, "Token str: " .. token_str .. "; Generated token: " .. generated_token)
                if token ~= generated_token then
                    ngx.status = 401
                    ngx.say("The provided API token (" .. token .. ") is not allowed to access the tool.")
                    ngx.exit(401)
                end
            }

            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Credentials "true";

            # Disable proxy buffering - applications like guacamole have problems with this setting
            proxy_buffering off;

            proxy_redirect off;
            proxy_set_header Host $host;

            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
            proxy_pass_request_headers on;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_store off;
            
            proxy_pass http://127.0.0.1:$access_port/$remaining_part$is_args$args;

            gzip on;
            gzip_proxied any;
            gzip_types *;
        }
    }
}
