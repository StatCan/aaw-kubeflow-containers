
###############################
###  docker-bits/0_Rocker.Dockerfile
###############################

# Rocker/geospatial is tagged by R version number.  They are not clear on whether they'll change those tagged
# images for hotfixes, so always pin tag and digest to prevent unexpected upstream changes
FROM rocker/geospatial:4.2.1@sha256:5caca36b8962233f8636540b7c349d3f493f09e864b6e278cb46946ccf60d4d2

# For compatibility with docker stacks
ARG NB_USER="jovyan"
ARG HOME=/home/$NB_USER
ENV NB_UID="1000"
ENV NB_GID="100"

USER root
ENV PATH="/home/jovyan/.local/bin/:${PATH}"

#Fix-permissions
COPY remote-desktop/fix-permissions /usr/bin/fix-permissions
RUN chmod u+x /usr/bin/fix-permissions

ENV RESOURCES_PATH="/resources"
RUN mkdir $RESOURCES_PATH

# Copy installation scripts
COPY remote-desktop $RESOURCES_PATH

#Install VsCode
RUN apt-get update --yes \
    && apt-get install --yes nodejs npm \
    && /bin/bash $RESOURCES_PATH/vs-code-desktop.sh --install \
    && clean-layer.sh

# Install Visual Studio Code extensions
# https://github.com/cdr/code-server/issues/171
ARG SHA256py=a4191fefc0e027fbafcd87134ac89a8b1afef4fd8b9dc35f14d6ee7bdf186348
ARG SHA256gl=ed130b2a0ddabe5132b09978195cefe9955a944766a72772c346359d65f263cc
ENV VSCODE_EXTENSIONS=/resources/code/data/extensions
#RUN \
#    cd /resources/code/data \
#    && VS_PYTHON_VERSION="2020.5.86806" \
#    && wget --quiet --no-check-certificate https://github.com/microsoft/vscode-python/releases/download/$VS_PYTHON_VERSION/ms-python-release.vsix \
#    && echo "${SHA256py} ms-python-release.vsix" | sha256sum -c - \
#    && bsdtar -xf ms-python-release.vsix extension \
#    && rm ms-python-release.vsix \
#    && mv extension $VSCODE_EXTENSIONS/ms-python.python-$VS_PYTHON_VERSION \
#    && VS_FRENCH_VERSION="1.68.3" \
#    && VS_LOCALE_REPO_VERSION="1.68.3" \
#    && git clone -b release/$VS_LOCALE_REPO_VERSION https://github.com/microsoft/vscode-loc.git \
#    && cd vscode-loc \
#    && npm install -g --unsafe-perm vsce@1.103.1 \
#    && cd i18n/vscode-language-pack-fr \
#    && vsce package \
#    && bsdtar -xf vscode-language-pack-fr-$VS_FRENCH_VERSION.vsix extension \
#    && mv extension $VSCODE_EXTENSIONS/ms-ceintl.vscode-language-pack-fr-$VS_FRENCH_VERSION \
#    && cd ../../../ \
#    # -fr option is required. git clone protects the directory and cannot delete it without -fr
#    && rm -fr vscode-loc \
#    && npm uninstall -g vsce \
#    && fix-permissions /resources/code/data \
#    && clean-layer.sh
    
#Set Defaults
ENV HOME=/home/$NB_USER

ARG NO_VNC_VERSION=1.3.0
ARG NO_VNC_SHA=ee8f91514c9ce9f4054d132f5f97167ee87d9faa6630379267e569d789290336
RUN pip3 install --force websockify==0.9.0 \
    && wget https://github.com/novnc/noVNC/archive/refs/tags/v${NO_VNC_VERSION}.tar.gz -O /tmp/novnc.tar.gz \
    && echo "${NO_VNC_SHA} /tmp/novnc.tar.gz" | sha256sum -c - \
    && tar -xf /tmp/novnc.tar.gz -C /tmp/ \
    && mv /tmp/noVNC-${NO_VNC_VERSION} /opt/novnc \
    && rm /tmp/novnc.tar.gz \
    && chown -R $NB_UID:$NB_GID /opt/novnc \
    && cd /opt/novnc/ \
    && wget https://gist.githubusercontent.com/sylus/cb01e59056780a2161186139b25818fb/raw/99ebd62a304c661d5612ad72ebc318f70d02741c/feat-notebook-Patch-noVNC-for-notebooks.patch \
    && patch -p1 < feat-notebook-Patch-noVNC-for-notebooks.patch

COPY --chown=$NB_USER:100 canada.ico $RESOURCES_PATH/favicon.ico

USER root
RUN apt-get update --yes \
    && apt-get install --yes nginx \
    && chown -R $NB_USER:100 /var/log/nginx \
    && chown $NB_USER:100 /etc/nginx \
    && chmod -R 755 /var/log/nginx \
    && rm -rf /var/lib/apt/lists/*
RUN chown -R $NB_USER /home/$NB_USER
USER $NB_USER
COPY --chown=$NB_USER:100 nginx.conf /etc/nginx/nginx.conf

###############################
###  docker-bits/7_remove_vulnerabilities.Dockerfile
###############################

###############################
###  docker-bits/âˆž_CMD_remote-desktop.Dockerfile
###############################

# Configure container startup

USER root

WORKDIR /home/$NB_USER
EXPOSE 8888
COPY start-remote-desktop.sh /usr/local/bin/
COPY mc-tenant-wrapper.sh /usr/local/bin/mc
COPY trino-wrapper.sh /usr/local/bin/trino
RUN chmod +x /usr/local/bin/trino
RUN chsh -s /bin/bash $NB_USER

# Add --user to all pip install calls and point pip to Artifactory repository
COPY pip.conf /tmp/pip.conf
RUN cat /tmp/pip.conf >> /etc/pip.conf && rm /tmp/pip.conf \
    && pip config set global.timeout 300

# Point conda to Artifactory repository
COPY .condarc /tmp/.condarc
RUN cat /tmp/.condarc > /opt/conda/.condarc && rm /tmp/.condarc

# Point R to Artifactory repository
COPY Rprofile.site /tmp/Rprofile.site
RUN cat /tmp/Rprofile.site >> /usr/local/lib/R/etc/Rprofile.site && rm /tmp/Rprofile.site

USER $NB_USER
ENTRYPOINT ["tini", "--"]
CMD ["start-remote-desktop.sh"]
