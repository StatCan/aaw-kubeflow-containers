# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service using a helm chart.
#
# https://github.com/Azure/actions-workflow-samples/tree/master/Kubernetes
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace:
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).
name: build cpu
on:
  push:
<<<<<<< HEAD
<<<<<<< HEAD
    branches:
<<<<<<< HEAD
<<<<<<< HEAD
      - Short-Haches
=======
      - Short-Haches  
>>>>>>> Change to short hashes
=======
      - Short-Haches  
>>>>>>> change the hashes
=======
    branches:  
>>>>>>> Update build-cpu.yml
=======
    branches:
>>>>>>> Formatting
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: k8scc01covidacr
  CLUSTER_NAME: k8s-cancentral-01-covid-aks
  CLUSTER_RESOURCE_GROUP: k8s-cancentral-01-covid-aks
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Free disk space
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h

      # Container build and push to a Azure Container registry (ACR)
      - run: |
          # Base Notebook CPU
          docker build -f base-notebook/cpu/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu:$SHORT_SHA  base-notebook/cpu
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu:$SHORT_SHA 
          docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu:$SHORT_SHA  ${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu:${GITHUB_REF#refs/*/}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu:${GITHUB_REF#refs/*/}
          docker system prune -f -a

<<<<<<< HEAD
    # Scan image for vulnerabilities
    - uses: Azure/container-scan@v0
      with:
<<<<<<< HEAD
        image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu:$SHORT_SHA
<<<<<<< HEAD
=======
        image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu:
>>>>>>> Update build-cpu.yml
=======
>>>>>>> short
=======
        image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu:${{ env.SHORT_SHA }}
>>>>>>> test1
        severity-threshold: CRITICAL
        run-quality-checks: false

    # Container build and push to a Azure Container registry (ACR)
    - run: |
        # Minimal Notebook CPU
        docker build -f minimal-notebook/cpu/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:$SHORT_SHA .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:$SHORT_SHA
        docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:$SHORT_SHA ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:${GITHUB_REF#refs/*/}
<<<<<<< HEAD
=======
        docker build -f minimal-notebook/cpu/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:$SHORT_SHA  .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:$SHORT_SHA 
        docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:$SHORT_SHA  ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:${GITHUB_REF#refs/*/}
>>>>>>> Update build-cpu.yml
=======
>>>>>>> short
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:${GITHUB_REF#refs/*/}
        docker system prune -f -a
=======
      # Scan image for vulnerabilities
      - uses: Azure/container-scan@v0
        with:
          image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu:${{ env.SHORT_SHA }}
          severity-threshold: CRITICAL
          run-quality-checks: false

      # Container build and push to a Azure Container registry (ACR)
      - run: |
          # Minimal Notebook CPU
          docker build -f minimal-notebook/cpu/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:$SHORT_SHA .
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:$SHORT_SHA
          docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:$SHORT_SHA ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:${GITHUB_REF#refs/*/}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:${GITHUB_REF#refs/*/}
          docker system prune -f -a
>>>>>>> Formatting

      # Scan image for vulnerabilities
      - uses: Azure/container-scan@v0
        with:
          image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:${{ env.SHORT_SHA }}
          severity-threshold: CRITICAL
          run-quality-checks: false

      # Container build and push to a Azure Container registry (ACR)
      - run: |
          # Geomatics Notebook CPU
          docker build -f geomatics-notebook/cpu/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:$SHORT_SHA .
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:$SHORT_SHA
          docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:$SHORT_SHA ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:${GITHUB_REF#refs/*/}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:${GITHUB_REF#refs/*/}
          docker system prune -f -a

      # Scan image for vulnerabilities
      - uses: Azure/container-scan@v0
        with:
          image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:${{ env.SHORT_SHA }}
          severity-threshold: CRITICAL
          run-quality-checks: false

<<<<<<< HEAD
    # Container build and push to a Azure Container registry (ACR)
    - run: |
        # Machine Learning Notebook CPU
        docker build -f machine-learning-notebook/cpu/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:$SHORT_SHA .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:$SHORT_SHA
        docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:$SHORT_SHA ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${GITHUB_REF#refs/*/}
<<<<<<< HEAD
=======
        docker build -f machine-learning-notebook/cpu/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:$SHORT_SHA .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu$SHORT_SHA
        docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:$SHORT_SHA${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${GITHUB_REF#refs/*/}
>>>>>>> Update build-cpu.yml
=======
>>>>>>> short
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${GITHUB_REF#refs/*/}
        docker system prune -f -a

    # Scan image for vulnerabilities
    - uses: Azure/container-scan@v0
      with:
<<<<<<< HEAD
        image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:$SHORT_SHA
<<<<<<< HEAD
=======
        image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu$SHORT_SHA
>>>>>>> Update build-cpu.yml
=======
>>>>>>> short
=======
        image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${{ env.SHORT_SHA }}
>>>>>>> test1
        severity-threshold: CRITICAL
        run-quality-checks: false
=======
      # Container build and push to a Azure Container registry (ACR)
      - run: |
          # Machine Learning Notebook CPU
          docker build -f machine-learning-notebook/cpu/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:$SHORT_SHA .
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:$SHORT_SHA
          docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:$SHORT_SHA ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${GITHUB_REF#refs/*/}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${GITHUB_REF#refs/*/}
          docker system prune -f -a

      # Scan image for vulnerabilities
      - uses: Azure/container-scan@v0
        with:
          image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${{ env.SHORT_SHA }}
          severity-threshold: CRITICAL
          run-quality-checks: false
>>>>>>> Formatting

      # Container build and push to a Azure Container registry (ACR)
      - run: |
          # R-Studio CPU
          docker build -f r-studio/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:$SHORT_SHA r-studio
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:$SHORT_SHA
          docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:$SHORT_SHA ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:${GITHUB_REF#refs/*/}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:${GITHUB_REF#refs/*/}
          docker system prune -f -a

      # Scan image for vulnerabilities
      - uses: Azure/container-scan@v0
        with:
          image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:${{ env.SHORT_SHA }}
          severity-threshold: CRITICAL
          run-quality-checks: false
