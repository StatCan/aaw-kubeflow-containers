# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service using a helm chart.
#
# https://github.com/Azure/actions-workflow-samples/tree/master/Kubernetes
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace:
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).
name: build cpu
on:
  push:
    branches:
      - master
  pull_request:
    branches: 
      - master  # DEBUG

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: k8scc01covidacr
  CLUSTER_NAME: k8s-cancentral-01-covid-aks
  CLUSTER_RESOURCE_GROUP: k8s-cancentral-01-covid-aks
  LATEST_IMAGE_TAG: master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # DEBUG: Removed for debugging
    # - name: Free disk space
    #   run: |
    #     sudo swapoff -a
    #     sudo rm -f /swapfile
    #     sudo apt clean
    #     docker rmi $(docker image ls -aq)
    #     df -h

    # Container build and push to a Azure Container registry (ACR)
    - name: Base Notebook CPU
      id: base_notebook_cpu
      working-directory: ./base-notebook/
      run: |
        UNTAGGED_IMAGE="${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu"
        TAG_PINNED="$UNTAGGED_IMAGE:${{ github.sha }}"
        TAG_LATEST="$UNTAGGED_IMAGE:${{ env.LATEST_IMAGE_TAG }}"
        echo "::set-output name=tag_pinned::$TAG_PINNED"

        # Try pulling latest from acr to get a source for cache-from
        # docker pull "$TAG_LATEST" || true

        # Build and push image
        (UPSTREAM_CONTAINER_CPU="jupyter/datascience-notebook:04f7f60d34a6" && docker build --cache-from $TAG_LATEST -t $TAG_PINNED --build-arg BASE_CONTAINER=$UPSTREAM_CONTAINER_CPU .)
        docker push "$TAG_PINNED"

        docker tag "$TAG_PINNED" "$TAG_LATEST"
        docker push "$TAG_LATEST"
    #     docker system prune -f -a

    # # Scan image for vulnerabilities
    # - uses: Azure/container-scan@v0
    #   with:
    #     image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/base-notebook-cpu:${{ github.sha }}
    #     severity-threshold: CRITICAL
    #     run-quality-checks: false

    # Container build and push to a Azure Container registry (ACR)
    - name: Minimal Notebook CPU
      id: minimal_notebook_cpu
      working-directory: ./minimal-notebook/
      run: |
        UNTAGGED_IMAGE="${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu"
        TAG_PINNED="$UNTAGGED_IMAGE:${{ github.sha }}"
        TAG_LATEST="$UNTAGGED_IMAGE:${{ env.LATEST_IMAGE_TAG }}"
        echo "::set-output name=tag_pinned::$TAG_PINNED"

        # Build and push image
        docker build -t $TAG_PINNED --build-arg BASE_CONTAINER=${{ steps.base_notebook_cpu.outputs.tag_pinned }} .
        docker push "$TAG_PINNED"

        docker tag "$TAG_PINNED" "$TAG_LATEST"
        docker push "$TAG_LATEST"
    #     docker system prune -f -a

    # # Scan image for vulnerabilities
    # - uses: Azure/container-scan@v0
    #   with:
    #     image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/minimal-notebook-cpu:${{ github.sha }}
    #     severity-threshold: CRITICAL
    #     run-quality-checks: false

    # # Container build and push to a Azure Container registry (ACR)
    # - run: |
    #     # Geomatics Notebook CPU
    #     docker build -f geomatics-notebook/cpu/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:${{ github.sha }} .
    #     docker push ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:${{ github.sha }}
    #     docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:${{ github.sha }} ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:${GITHUB_REF#refs/*/}
    #     docker push ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:${GITHUB_REF#refs/*/}
    #     docker system prune -f -a

    # # Scan image for vulnerabilities
    # - uses: Azure/container-scan@v0
    #   with:
    #     image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/geomatics-notebook-cpu:${{ github.sha }}
    #     severity-threshold: CRITICAL
    #     run-quality-checks: false

    # # Container build and push to a Azure Container registry (ACR)
    # - run: |
    #     # Machine Learning Notebook CPU
    #     docker build -f machine-learning-notebook/cpu/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${{ github.sha }} .
    #     docker push ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${{ github.sha }}
    #     docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${{ github.sha }} ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${GITHUB_REF#refs/*/}
    #     docker push ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${GITHUB_REF#refs/*/}
    #     docker system prune -f -a

    # # Scan image for vulnerabilities
    # - uses: Azure/container-scan@v0
    #   with:
    #     image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/machine-learning-notebook-cpu:${{ github.sha }}
    #     severity-threshold: CRITICAL
    #     run-quality-checks: false

    # # Container build and push to a Azure Container registry (ACR)
    # - run: |
    #     # R-Studio CPU
    #     docker build -f r-studio/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:${{ github.sha }} r-studio
    #     docker push ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:${{ github.sha }}
    #     docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:${{ github.sha }} ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:${GITHUB_REF#refs/*/}
    #     docker push ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:${GITHUB_REF#refs/*/}
    #     docker system prune -f -a

    # # Scan image for vulnerabilities
    # - uses: Azure/container-scan@v0
    #   with:
    #     image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/r-studio-cpu:${{ github.sha }}
    #     severity-threshold: CRITICAL
    #     run-quality-checks: false
