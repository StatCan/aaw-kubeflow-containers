# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service using a helm chart.
#
# https://github.com/Azure/actions-workflow-samples/tree/master/Kubernetes
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace:
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).
name: push
on:
  push:
    branches:
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY: blairdrummond
  # REGISTRY: k8scc01covidacr.azurecr.io
  REGISTRY_NAME: k8scc01covidacr
  CLUSTER_NAME: k8s-cancentral-01-covid-aks
  CLUSTER_RESOURCE_GROUP: k8s-cancentral-01-covid-aks
jobs:
  build:
    strategy:
      matrix:
        notebook:
          - RStudio
          - VSCode-CPU
          - VSCode-Spark
          - VSCode-PyTorch
          - VSCode-Tensorflow
          - JupyterLab-CPU
          - JupyterLab-Spark
          - JupyterLab-PyTorch
          - JupyterLab-Tensorflow
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    # Connect to Azure Container registry (ACR)
    #- uses: azure/docker-login@v1
    #  with:
    #    # login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
    #    login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
    #    username: ${{ secrets.REGISTRY_USERNAME }}
    #    password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}


    - name: Free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        docker rmi $(docker image ls -aq)
        df -h

    # Container build and push to a Azure Container registry (ACR)
    - name: Build image
      run: |
        sudo apt-get install --yes make
        make all
        COMMIT=$(make get-commit)
        IMAGE_NAME="$(echo ${{ matrix.notebook }} | tr '[:upper:]' '[:lower:]')"
        REGISTRY=${{ env.REGISTRY }}
        cd output/${{ matrix.notebook }}
        echo
        echo "Do the build"
        docker build . --build-arg BASE_VERSION=$COMMIT -t $REGISTRY/$IMAGE_NAME:${{ github.sha }}
        echo
        echo "Push the long-ref"
        docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}
        echo
        echo "Push the short-ref"
        docker tag $REGISTRY/$IMAGE_NAME:${{ github.sha }} $REGISTRY/$IMAGE_NAME:${GITHUB_REF#refs/*/}
        docker push $REGISTRY/$IMAGE_NAME:${GITHUB_REF#refs/*/}
        echo
        echo "Set an alias to latest"
        docker tag $REGISTRY/$IMAGE_NAME:${{ github.sha }} $REGISTRY/$IMAGE_NAME:latest
        docker push $REGISTRY/$IMAGE_NAME:latest
        echo
        echo
        echo
        echo "Pushed $REGISTRY/$IMAGE_NAME:${{ github.sha }}"
        echo "       $REGISTRY/$IMAGE_NAME:${{ github.sha }} $REGISTRY/$IMAGE_NAME:${GITHUB_REF#refs/*/}"
        echo "       $REGISTRY/$IMAGE_NAME:${{ github.sha }} $REGISTRY/$IMAGE_NAME:latest"
        cd -

    # # Scan image for vulnerabilities
    # - uses: Azure/container-scan@v0
    #   with:
    #     image-name: ${{ env.REGISTRY }}/base-notebook-cpu:${{ github.sha }}
    #     severity-threshold: CRITICAL
    #     run-quality-checks: false
