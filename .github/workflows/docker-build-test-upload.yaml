name: Download a parent image, build a new one, and test it; then upload the image, tags, and manifests to GitHub artifacts

env:
  REGISTRY_NAME: k8scc01covidacr
  DEV_REGISTRY_NAME: k8scc01covidacrdev
  LOCAL_REPO: localhost:5000
  HADOLINT_VERSION: "2.12.0"

on:
  workflow_call:
    inputs:
      parent-image:
        description: Parent image name
        required: true
        type: string
      parent-variant:
        description: Parent variant tag prefix
        required: false
        type: string
        default: default
      image:
        description: Image name
        required: true
        type: string
      variant:
        description: Variant tag prefix
        required: false
        type: string
        default: default
    secrets:
      REGISTRY_USERNAME:
        description: The username for the container registry
        required: true
      REGISTRY_PASSWORD:
        description: The password for the container registry
        required: true

jobs:
  build-test-upload:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - name: Run Hadolint
        run: |
          sudo curl -L https://github.com/hadolint/hadolint/releases/download/v${{ env.HADOLINT_VERSION }}/hadolint-Linux-x86_64 --output hadolint
          sudo chmod +x hadolint
          ./hadolint images/${{ inputs.image }}/Dockerfile --no-fail

      - name: Echo disk usage before clean up
        run: ./.github/scripts/echo_usage.sh

      - name: Free up all available disk space before building
        run: ./.github/scripts/cleanup_runner.sh

      - name: Echo disk usage before build start
        run: ./.github/scripts/echo_usage.sh

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # make build emits full_image_name, image_tag, and image_repo outputs
      - name: Build image
        id: build-image
        run: make build/${{ inputs.image }} REPO=${{ env.LOCAL_REPO }}

      - name: Echo disk usage after build completion
        run: ./.github/scripts/echo_usage.sh

      - name: Add standard tag names (short sha, sha, and branch) and any other post-build activity
        run: make post-build/${{ inputs.image }} REPO=${{ env.LOCAL_REPO }}

      - name: Push image to local registry (default pushes all tags)
        run: make push/${{ inputs.image }} REPO=${{ env.LOCAL_REPO }}

      # Image testing
      - name: Set Up Python for Test Suite
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' 

      - name: Set up venv for Test Suite
        run: |
          python -m pip install --upgrade pip
          make install-python-dev-venv
      
      - name: Test image
        run: make test/${{ inputs.image }} REPO=${{ env.LOCAL_REPO }}

      # Free up space from build process (containerscan action will run out of space if we don't)
      - run: ./.github/scripts/cleanup_runner.sh

      # Scan image for vulnerabilities
      - name: Aqua Security Trivy image scan
      # see https://github.com/StatCan/aaw-private/issues/11 -- should be re-enabled
        if: steps.notebook-name.outputs.NOTEBOOK_NAME != 'sas'
        run: |
          printf ${{ secrets.CVE_ALLOWLIST }} > .trivyignore
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin ${{ env.TRIVY_VERSION }}
          
          set +e

          for ((i=0; i<${{ env.TRIVY_MAX_RETRIES }}; i++)); do
            echo "Attempt $((i + 1)) of ${{ env.TRIVY_MAX_RETRIES }}..."

            trivy image \
              --db-repository ${{ env.TRIVY_DATABASES }} \
              --java-db-repository ${{ env.TRIVY_JAVA_DATABASES }} \
              ${{ steps.build-image.outputs.full_image_name }} \
              --exit-code 10 --timeout=20m --scanners vuln --severity CRITICAL
            EXIT_CODE=$?

            if [[ $EXIT_CODE -eq 0 ]]; then
              echo "Trivy scan completed successfully."
              exit 0
            elif [[ $EXIT_CODE -eq 10 ]]; then
              echo "Trivy scan completed successfully. Some vulnerabilities were found."
              exit 0
            elif [[ $i -lt $(( ${{ env.TRIVY_MAX_RETRIES }} - 1))  ]]; then
              echo "Encountered unexpected error. Retrying in ${{ env.TRIVY_RETRY_DELAY }} seconds..."
              sleep ${{ env.TRIVY_RETRY_DELAY }}
            else
              echo "Unexpected error persists after ${{ env.TRIVY_MAX_RETRIES }} attempts. Exiting."
              exit 1
            fi
          done
